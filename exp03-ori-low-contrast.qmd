---
title: "Experiment 3: Orientation with lower constrast"
format: html
---

## Libraries and settings required for analysis
```{r setup}
library(tidyverse)

library(cmdstanr)
library(fs)
library(glue)
library(kilter) # devtools:install_github("alexander-pastukhov/kilter", dependencies=TRUE)
library(loo)

source("utils.R")
```


## Data import

```{r import data}
results <-
  # get names for all csv files 
  fs::dir_ls("Data/exp03-orientation-low-contrast", glob="*.csv") |>
  
  # load them one at a time specifying the column structure
  purrr::map(~read_csv(., col_types = cols(
    Participant = col_character(),
    Session = col_character(),
    Block = col_integer(),
    Task = col_character(),
    Order = col_character(),
    ComplementaryOri = col_logical(),
    Trial = col_integer(),
    OnsetDelay = col_double(),
    Orientation = col_double(),
    Color = col_character(),
    ColorIsTarget = col_logical(),
    ColorResponse = col_character(),
    ColorRT = col_double(),
    OrientationResponse = col_double(),
    OrientationRT = col_double()
  ))) |>
  
  # bind into a single table
  list_rbind() |>
  
  # block 1: single central task practice
  filter(Block > 1) |>

  # Mark first trial for each participant (no prior history)
  mutate(IsFirstTrial = Block ==2 & Trial == 1) |>

  # turning selected variables into factors
  mutate(Task = factor(Task, levels = c("single", "dual")),
         Order = factor(Order, levels = c("descending", "random", "ascending")),
         Participant = factor(Participant)) |>
  
  # computing whether response on central task was correct
  mutate(ColorTaskCorrect = (ColorIsTarget & ColorResponse == "target") | (!ColorIsTarget & ColorResponse ==  "distractor")) |>
  
  # adjusting for circularity and symmetry of orientation response
  mutate(Orientation = ifelse(ComplementaryOri, -Orientation, Orientation),
         OrientationResponse = ifelse(ComplementaryOri, -OrientationResponse, OrientationResponse),
         DeltaOri = OrientationResponse - Orientation,
         OriResponse = case_when(DeltaOri > 90 & OrientationResponse > 180  ~ OrientationResponse - 180,
                                 DeltaOri < 90 & OrientationResponse < -180 ~  OrientationResponse + 180,
                               TRUE ~ OrientationResponse),
         ResponseError = OriResponse - Orientation) |>
  rename(RawOrientationResponse = OrientationResponse)
```

## Statistical analysis

Preparing data for Stan
```{r}
stan_data <- list(
  DataN = nrow(results),
  TaskN = nlevels(results$Task),
  ParticipantsN = nlevels(results$Participant),

  Ori = results$Orientation,
  Response = results$OriResponse,
  Task = as.integer(results$Task),
  Participant = as.integer(results$Participant),
  IsFirstTrial = results$IsFirstTrial
)
```

Compiling models
```{r}
model_names <- c("bayesian_integration", "ubi_ur", "ubi_r", "ubi_re")
models <- map(model_names, ~cmdstan_model(glue("Stan/ori_{.}.stan")))
names(models) <- model_names
```

Sampling
```{r}
for(a_model in model_names) {
  cat(a_model, "\n")
  loo_name <- glue("LOO/loo-exp3-{a_model}.RDS")
  draws_with_predictions_name <- glue("DrawsWithPredictions/draws-exp3-{a_model}.RDS")
  draws_name <- glue("Draws/draws-exp3-{a_model}.RDS")
  
  if (fs::file_exists(loo_name) & fs::file_exists(draws_with_predictions_name) & fs::file_exists(draws_name)) next;
  
  fit <- models[[a_model]]$sample(stan_data, chains = 4, parallel_chains = future::availableCores())
  fit_loo <- fit$loo()
  saveRDS(fit_loo, loo_name) 
  
  draws <- fit$draws(format = "df") |> as_tibble() |> select(-starts_with("log_lik"))
  saveRDS(draws, draws_with_predictions_name)
  
  draws_without_predictions <- draws |> select(starts_with(c("mu_params", "l_rho_params", "sigma_params", "sigma_params", "z_params", "sigma_task")))
  saveRDS(draws_without_predictions, draws_name)
}
```


Comparing models via leave-one-out information criterion
```{r}
loos <- purrr::map(model_names, ~readRDS(glue("LOO/loo-exp3-{.}.RDS")))
names(loos) <- model_names
loo::loo_compare(loos)
loo::loo_model_weights(loos)
```


## Generating summary for predictions at the group level

Bootstrapping behavioral averages
```{r}
bootstrapped_ci <- bootstrap_group_averages("BootstrappedAverages/exp3-absolute.RDS", results, Orientation, OriResponse)
```

Posterior predictions
```{r}
draws <- readRDS("DrawsWithPredictions/draws-exp3-ubi_re.RDS")

mu <- kilter::extract_stan_posterior_matrix(draws, "mu")
posterior_mu <- posterior_group_averages_from_mu("PosteriorAverages/exp3-absolute-mu.RDS", results, mu, Orientation, OriResponse)

plot_model_predictions("ubi_re", posterior_mu, bootstrapped_ci, Orientation, Response)
```

