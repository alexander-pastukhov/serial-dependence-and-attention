---
title: "Experiment 1: Numerosity"
format: html
---

## Libraries and settings required for analysis
```{r setup}
library(tidyverse)

library(cmdstanr)
library(fs)
library(glue)
library(kilter) # devtools:install_github("alexander-pastukhov/kilter", dependencies=TRUE)
library(loo)
library(patchwork)

source("utils.R")
```

```{r import data}
results <- 
  # get names for all csv files 
  fs::dir_ls("Data/exp01-numerosity/", glob="*.csv") |>

  # load them one at a time specifying the column structure
  purrr::map(~read_csv(., col_types = cols(
    Participant = col_character(),
    Session = col_character(),
    Block = col_integer(),
    Task = col_character(),
    Order = col_character(),
    Trial = col_integer(),
    OnsetDelay = col_double(),
    Ndots = col_integer(),
    Color = col_character(),
    ColorIsTarget = col_logical(),
    ColorResponse = col_character(),
    ColorRT = col_double(),
    NumerosityResponse = col_double(),
    NumerosityRT = col_double()
  ))) |>
  
  # bind into a single table
  list_rbind() |>
  
  rename(Numerosity = Ndots) |>
  
  # turning selected variables into factors
  mutate(Task = factor(Task, levels = c("single", "dual")),
         Order = factor(Order, levels = c("ascending", "random", "descending")),
         Participant = factor(Participant)) |>
  
  # computing whether response on central task was correct
  mutate(ColorTaskCorrect = (ColorIsTarget & ColorResponse == "target") | (!ColorIsTarget & ColorResponse ==  "distractor")) |>
  
  # convert numerosity response to number scale
  mutate(PN = NumerosityResponse,
         NumerosityResponse = NumerosityResponse * 100) |>
  
  # block 1: single central task
  filter(Block > 1) |>
  mutate(IsFirstTrial = Block == 2 & Trial == 1)
```


## Statistical analysis

Preparing data for Stan
```{r}
stan_data <- list(
  DataN = nrow(results),
  TaskN = nlevels(results$Task),
  ParticipantsN = nlevels(results$Participant),
  Numerosity_max = 100,

  Numerosity = results$Numerosity,
  Response = results$NumerosityResponse,
  Task = as.integer(results$Task),
  Participant = as.integer(results$Participant),
  IsFirstTrial = results$IsFirstTrial
)
```

Compiling models
```{r}
model_names <- c("log_linear", "bayesian_integration", "ubi_ur", "ubi_r", "ubi_re", "ubi_re_ct")
models <- map(model_names, ~cmdstan_model(glue("Stan/num_{.}.stan")))
names(models) <- model_names
```
Sampling
```{r}
for(a_model in model_names) {
  cat(a_model, "\n")
  loo_name <- glue("LOO/loo-exp1-{a_model}.RDS")
  draws_with_predictions_name <- glue("DrawsWithPredictions/draws-exp1-{a_model}.RDS")
  draws_name <- glue("Draws/draws-exp1-{a_model}.RDS")
  
  if (fs::file_exists(loo_name) & fs::file_exists(draws_with_predictions_name) & fs::file_exists(draws_name)) next;
  
  fit <- models[[a_model]]$sample(stan_data, chains = 4, parallel_chains = future::availableCores())
  fit_loo <- fit$loo()
  saveRDS(fit_loo, loo_name) 
  
  draws <- fit$draws(format = "df") |> as_tibble() |> select(-starts_with("log_lik"))
  saveRDS(draws, draws_with_predictions_name)
  
  draws_without_predictions <- draws |> select(starts_with(c("mu_params", "l_rho_params", "sigma_params", "sigma_params", "z_params", "sigma_task")))
  saveRDS(draws_without_predictions, draws_name)
}
```


Comparing models via leave-one-out information criterion
```{r}
loos <- purrr::map(model_names, ~readRDS(glue("LOO/loo-exp1-{.}.RDS")))
names(loos) <- model_names
saveRDS(summarize_loo_comparison(loos), "LOO/loo-df-exp1.RDS")
summarize_loo_comparison(loos)
```

## Generating summary for predictions at the group level for absolute orientation

```{r}
draws <- readRDS("DrawsWithPredictions/draws-exp1-ubi_re_ct.RDS")
mu <- kilter::extract_stan_posterior_matrix(draws, "mu")
```

```{r}
# Bootstrapping behavioral averages
bootstrapped_abs <- bootstrap_group_averages("BootstrappedAverages/exp1-absolute.RDS", results, Numerosity, NumerosityResponse, compute_average_absolute_response)

# Posterior predictions
posterior_abs <- posterior_group_averages_from_mu("PosteriorAverages/exp1-absolute.RDS", results, mu, Numerosity, NumerosityResponse, compute_average_absolute_response)

plot <- plot_model_predictions("ubi_re", posterior_abs, bootstrapped_abs, Numerosity, Response) +
  geom_abline(aes(intercept = 0, slope = 1), linetype = "longdash", linewidth = 0.7)
saveRDS(plot, file = glue("ParameterPlots/abs-posterior-prediction-exp01-ubi_re_ct.RDS"))

plot
ggsave("Figures/posterior-abs-exp01_ubi_re_ct.png", units = "cm", width = 16, height = 8)
```

## Generating summary for predictions at the group level for relative orientation

```{r}
bootstrapped_rel <- bootstrap_group_averages("BootstrappedAverages/exp1-relative.RDS", results, Numerosity, NumerosityResponse, compute_average_relative_response)
posterior_rel <- posterior_group_averages_from_mu("PosteriorAverages/exp1-relative.RDS", results, mu, Numerosity, NumerosityResponse, compute_average_relative_response)
plot <- plot_model_predictions("ubi_re", posterior_rel, bootstrapped_rel, Rel_Stimulus, Response) +
  geom_hline(yintercept = 0, linetype = "dashed", linetype = "longdash", linewidth = 0.7) +
  geom_vline(xintercept = 0, linetype = "dashed", linetype = "longdash", linewidth = 0.7)
saveRDS(plot, file = glue("ParameterPlots/rel-posterior-prediction-exp01-ubi_re_ct.RDS"))
plot
ggsave("Figures/posterior-rel-exp01_ubi_re_ct.png", units = "cm", width = 16, height = 10)
```
## Plots for posterior distributions (for weights, prior evidence relevance and uncertainty)
```{r}
plot_parameter_distribution(draws, "exp01", "Prior Relevance", "mu_params[9]", "mu_params[10]")
plot_parameter_distribution(draws, "exp01", "Maximal Response Weight", "mu_params[5]", "mu_params[6]")
plot_parameter_distribution(draws, "exp01", "Maximal Evidence Weight", "mu_params[7]", "mu_params[8]")

plot_parameter_distribution(draws, "exp01", "Beta Central Tendency", "mu_scale_params[1]", "mu_scale_params[2]")

centralN <- parameter_posterior_df(draws, "mu_scale_params[7]", "mu_scale_params[8]", "Central_Num")|>
  mutate(Central_Num = 100 * inv_logit(Central_Num))
plot_parameter_distribution(centralN, "exp01", parameter_name = "Central_Num", long_df = TRUE)

plot_parameter_distribution(draws, "exp01", "Sigma Min", "mu_scale_params[3]", "mu_scale_params[4]")

sigma_max <- parameter_posterior_df(draws, "mu_scale_params[3]", "mu_scale_params[4]", "sigma_a" )|>
  mutate(sigma_b = parameter_posterior_df(draws, "mu_scale_params[5]", "mu_scale_params[6]", "sigma_b")[[3]],
         "Sigma Max" = sigma_a + sigma_b)|>
  select(.draw, Task, "Sigma Max")

plot_parameter_distribution(sigma_max, "exp01", parameter_name = "Sigma Max", long_df = TRUE)
```
